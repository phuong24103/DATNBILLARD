// <auto-generated />
using System;
using Datn_Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Datn_Api.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230927142310_datn")]
    partial class datn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Datn_Shared.Models.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BillStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BillStatusId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf3"),
                            Address = "Bình nguyên vô tận",
                            BillStatusId = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf5"),
                            CreateDate = new DateTime(2023, 9, 27, 21, 23, 9, 845, DateTimeKind.Local).AddTicks(4923),
                            PaymentId = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf6"),
                            Price = 1000.0,
                            UserId = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9230")
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.BillDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductId");

                    b.ToTable("BillDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f95d2d6-c3d3-4749-be89-97e220d62e79"),
                            BillId = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf3"),
                            Price = 1500.0,
                            ProductId = new Guid("cc37720a-7e89-463a-9510-1936e6761d8a"),
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.BillStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BillStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf5"),
                            Name = "đã thanh toán"
                        },
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492b15"),
                            Name = "Chưa thanh toán"
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Cart", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Datn_Shared.Models.CartDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Datn_Shared.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Datn_Shared.Models.CategoryDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityProduct")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("CategoriesDetail");
                });

            modelBuilder.Entity("Datn_Shared.Models.Gripe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Gripes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d85"),
                            Name = " Khảm",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d75"),
                            Name = "Ngọc",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Handle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Handles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d83"),
                            Name = "Họa tiết sành điệu",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d73"),
                            Name = " bọc da",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d81"),
                            Name = " Carbon",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d71"),
                            Name = " phủ carbon",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf6"),
                            Name = "Khi nhận hàng"
                        },
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492b16"),
                            Name = "Online"
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Datn_Shared.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GripeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HandleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ImportPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TopId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GripeId");

                    b.HasIndex("HandleId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("RenId");

                    b.HasIndex("TopId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d8a"),
                            AvailableQuantity = 1000,
                            CreateDate = new DateTime(2023, 9, 27, 21, 23, 9, 845, DateTimeKind.Local).AddTicks(4761),
                            Description = "Description",
                            GripeId = new Guid("cc37720a-7e89-463a-9510-1936e6761d85"),
                            HandleId = new Guid("cc37720a-7e89-463a-9510-1936e6761d83"),
                            Image = "gay1.png",
                            ImportPrice = 1000.0,
                            MaterialId = new Guid("cc37720a-7e89-463a-9510-1936e6761d81"),
                            Name = "Gậy bida sành điệu 1",
                            Price = 1500.0,
                            Producer = " Lucasi ",
                            RenId = new Guid("cc37720a-7e89-463a-9510-1936e6761d82"),
                            Sold = 500,
                            Status = 0,
                            TopId = new Guid("cc37720a-7e89-463a-9510-1936e6761d84")
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d8b"),
                            AvailableQuantity = 1000,
                            CreateDate = new DateTime(2023, 9, 27, 21, 23, 9, 845, DateTimeKind.Local).AddTicks(4778),
                            Description = "Description",
                            GripeId = new Guid("cc37720a-7e89-463a-9510-1936e6761d85"),
                            HandleId = new Guid("cc37720a-7e89-463a-9510-1936e6761d83"),
                            Image = "gay2.png",
                            ImportPrice = 1000.0,
                            MaterialId = new Guid("cc37720a-7e89-463a-9510-1936e6761d81"),
                            Name = "Gậy bida sành điệu 2",
                            Price = 1500.0,
                            Producer = " Lucasi ",
                            RenId = new Guid("cc37720a-7e89-463a-9510-1936e6761d82"),
                            Sold = 500,
                            Status = 0,
                            TopId = new Guid("cc37720a-7e89-463a-9510-1936e6761d84")
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d8c"),
                            AvailableQuantity = 1000,
                            CreateDate = new DateTime(2023, 9, 27, 21, 23, 9, 845, DateTimeKind.Local).AddTicks(4783),
                            Description = "Description",
                            GripeId = new Guid("cc37720a-7e89-463a-9510-1936e6761d75"),
                            HandleId = new Guid("cc37720a-7e89-463a-9510-1936e6761d73"),
                            Image = "gay3.png",
                            ImportPrice = 1000.0,
                            MaterialId = new Guid("cc37720a-7e89-463a-9510-1936e6761d71"),
                            Name = "Gậy bida sành điệu 3",
                            Price = 1500.0,
                            Producer = " Molinari  ",
                            RenId = new Guid("cc37720a-7e89-463a-9510-1936e6761d72"),
                            Sold = 500,
                            Status = 0,
                            TopId = new Guid("cc37720a-7e89-463a-9510-1936e6761d74")
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NecessaryPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ranks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9236"),
                            Description = "sành điệu ",
                            Name = "Kim cương",
                            NecessaryPoints = 10000
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Ren", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d82"),
                            Name = "carbon",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d72"),
                            Name = " bronze ",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Datn_Shared.Models.Top", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tops");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d84"),
                            Name = "Carbon họa tiết sành điệu",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d74"),
                            Name = "gỗ phủ carbon",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.UsedVoucher", b =>
                {
                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BillId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UsedVoucher");
                });

            modelBuilder.Entity("Datn_Shared.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RankId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9230"),
                            AccessFailedCount = 0,
                            Address = "Hoa Thanh Quế",
                            ConcurrencyStamp = "3434838f-6206-46b4-8cfb-c66984f8e76f",
                            DateOfBirth = new DateTime(2003, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quynhanhvippro@gmail.com",
                            EmailConfirmed = true,
                            Gender = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "QUYNHANHVIPPRO@GMAIL.COM",
                            NormalizedUserName = "QUYNHANH",
                            PasswordHash = "Quynhanh@03",
                            PhoneNumber = "0363636363",
                            PhoneNumberConfirmed = true,
                            Point = 10000,
                            RankId = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9236"),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "QuynhAnh"
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf4"),
                            Code = "DEMACIA",
                            Status = 0,
                            TimeEnd = new DateTime(2023, 9, 27, 21, 23, 9, 845, DateTimeKind.Local).AddTicks(4944),
                            TimeStart = new DateTime(2023, 9, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Value = 3.0
                        },
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492b14"),
                            Code = "Pitover",
                            Status = 0,
                            TimeEnd = new DateTime(2023, 9, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            TimeStart = new DateTime(2023, 9, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Value = 1.0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.WishList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Datn_Shared.Models.Bill", b =>
                {
                    b.HasOne("Datn_Shared.Models.BillStatus", "BillStatus")
                        .WithMany("Bills")
                        .HasForeignKey("BillStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Payment", "Payment")
                        .WithMany("Bills")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillStatus");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Datn_Shared.Models.BillDetail", b =>
                {
                    b.HasOne("Datn_Shared.Models.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Product", "Product")
                        .WithMany("BillDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Datn_Shared.Models.Cart", b =>
                {
                    b.HasOne("Datn_Shared.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Datn_Shared.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Datn_Shared.Models.CartDetail", b =>
                {
                    b.HasOne("Datn_Shared.Models.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Datn_Shared.Models.CategoryDetail", b =>
                {
                    b.HasOne("Datn_Shared.Models.Category", "Category")
                        .WithMany("CategoryDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Product", "Product")
                        .WithMany("CategoryDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Datn_Shared.Models.Post", b =>
                {
                    b.HasOne("Datn_Shared.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Datn_Shared.Models.Product", b =>
                {
                    b.HasOne("Datn_Shared.Models.Gripe", "Gripe")
                        .WithMany("Products")
                        .HasForeignKey("GripeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Handle", "Handle")
                        .WithMany("Products")
                        .HasForeignKey("HandleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Material", "Material")
                        .WithMany("Products")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Ren", "Ren")
                        .WithMany("Products")
                        .HasForeignKey("RenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Top", "Top")
                        .WithMany("Products")
                        .HasForeignKey("TopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gripe");

                    b.Navigation("Handle");

                    b.Navigation("Material");

                    b.Navigation("Ren");

                    b.Navigation("Top");
                });

            modelBuilder.Entity("Datn_Shared.Models.UsedVoucher", b =>
                {
                    b.HasOne("Datn_Shared.Models.Bill", "Bill")
                        .WithOne("UsedVoucher")
                        .HasForeignKey("Datn_Shared.Models.UsedVoucher", "BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Voucher", "Voucher")
                        .WithMany("UsedVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Datn_Shared.Models.User", b =>
                {
                    b.HasOne("Datn_Shared.Models.Rank", "Rank")
                        .WithMany("Users")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Datn_Shared.Models.WishList", b =>
                {
                    b.HasOne("Datn_Shared.Models.Product", "Product")
                        .WithMany("WishLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Datn_Shared.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Datn_Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Datn_Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Datn_Shared.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Datn_Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datn_Shared.Models.Bill", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("UsedVoucher")
                        .IsRequired();
                });

            modelBuilder.Entity("Datn_Shared.Models.BillStatus", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("Datn_Shared.Models.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Datn_Shared.Models.Category", b =>
                {
                    b.Navigation("CategoryDetails");
                });

            modelBuilder.Entity("Datn_Shared.Models.Gripe", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Datn_Shared.Models.Handle", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Datn_Shared.Models.Material", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Datn_Shared.Models.Payment", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("Datn_Shared.Models.Product", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("CartDetails");

                    b.Navigation("CategoryDetails");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Datn_Shared.Models.Rank", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Datn_Shared.Models.Ren", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Datn_Shared.Models.Top", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Datn_Shared.Models.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Posts");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Datn_Shared.Models.Voucher", b =>
                {
                    b.Navigation("UsedVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
